{"version":3,"file":"index.js","sources":["src/ignore.js","src/join.js","src/csx.js","src/Tree.js","src/index.js"],"sourcesContent":["import homunculus from 'homunculus';\n\nlet ES6Token = homunculus.getClass('token', 'js');\nlet Token = homunculus.getClass('token', 'csx');\nlet Node = homunculus.getClass('node', 'csx');\n\nlet S = {};\nS[Token.LINE] = S[Token.COMMENT] = S[Token.BLANK] = true;\n\nlet res;\nlet append;\n\nfunction ignore(node, includeLine) {\n  if(node instanceof Token || node instanceof ES6Token) {\n    if(node.isVirtual()) {\n      return;\n    }\n    node.ignore = true;\n    append = '';\n    while(node = node.next()) {\n      if(node.isVirtual() || !S.hasOwnProperty(node.type())) {\n        break;\n      }\n      let s = node.content();\n      res += s;\n      append += s;\n      if(includeLine || s != '\\n') {\n        node.ignore = true;\n      }\n    }\n  }\n  else if(node.isToken()) {\n    ignore(node.token(), includeLine);\n  }\n  else {\n    node.leaves().forEach(function(leaf) {\n      ignore(leaf, includeLine);\n    });\n  }\n}\n\nfunction parse(node, includeLine) {\n  res = '';\n  append = '';\n  ignore(node, includeLine);\n  return { res, append };\n}\n\nparse.S = S;\n\nexport default parse;","import homunculus from 'homunculus';\n\nlet JsNode = homunculus.getClass('Node', 'es6');\nlet Token = homunculus.getClass('Token');\n\nexport default function(node, word) {\n  let res = recursion(node, { 's': '', 'word': word });\n  return res.s;\n};\n\nfunction recursion(node, res) {\n  let isToken = node.name() === JsNode.TOKEN;\n  let isVirtual = isToken && node.token().type() === Token.VIRTUAL;\n  if(isToken) {\n    let token = node.token();\n    if(!isVirtual) {\n      if(res.word && [Token.ID, Token.NUMBER, Token.KEYWORD].indexOf(token.type()) > -1) {\n        res.s += ' ';\n      }\n      if(token.content() === '}' && res.s.charAt(res.s.length - 1) === ';') {\n        res.s = res.s.replace(/;$/, '');\n      }\n      res.s += token.content();\n      res.word = [Token.ID, Token.NUMBER, Token.KEYWORD].indexOf(token.type()) > -1;\n    }\n    else if(token.content() === ';') {\n      res.s += ';';\n      res.word = false;\n    }\n  }\n  else {\n    node.leaves().forEach(function(leaf) {\n      recursion(leaf, res);\n    });\n  }\n  return res;\n}","import homunculus from 'homunculus';\nimport Tree from './Tree';\nimport ignore from './ignore';\nimport join from './join';\n\nlet Token = homunculus.getClass('token', 'csx');\nlet Node = homunculus.getClass('node', 'csx');\n\nfunction elem(node) {\n  let res = '';\n  let tag = selfClose(node.first());\n  //open和selfClose逻辑复用\n  res += tag.res;\n  res += ',[';\n  let comma = false;\n  for(let i = 1, len = node.size(); i < len - 1; i++) {\n    let leaf = node.leaf(i);\n    switch(leaf.name()) {\n      case Node.CSXChild:\n        if(comma) {\n          res += ',';\n          comma = false;\n        }\n        res += child(leaf);\n        comma = true;\n        break;\n      case Node.TOKEN:\n        let s = leaf.token().content();\n        //open和close之间的空白不能忽略\n        if(/^\\s+$/.test(s)) {\n          if(leaf.prev().name() === Node.CSXOpeningElement && leaf.next().name() === Node.CSXClosingElement) {\n            res += '\"' + s.replace(/\"/g, '\\\\\"').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n\\\\\\n') + '\"';\n          }\n          else {\n            res += s;\n          }\n        }\n        else {\n          if(comma) {\n            res += ',';\n            comma = false;\n          }\n          res += '\"' + s.replace(/\"/g, '\\\\\"').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n\\\\\\n') + '\"';\n          comma = true;\n        }\n        break;\n      default:\n        if(comma) {\n          res += ',';\n          comma = false;\n        }\n        res += parse(leaf);\n        comma = true;\n    }\n  }\n  res += ']';\n  if(tag.isCp && tag.name) {\n    res += ',\"' + tag.name + '\"';\n  }\n  res += ')';\n  if(node.last().name() === Node.CSXClosingElement) {\n    res += ignore(node.last(), true).res;\n  }\n  return res;\n}\nfunction selfClose(node, isClose) {\n  let res = '';\n  let name;\n  let first = node.leaf(1);\n  if(first.isToken()) {\n    name = first.token().content();\n  }\n  else if(first.name() === Node.CSXMemberExpression) {\n    name = first.first().token().content();\n    for(let i = 1, len = first.size(); i < len; i++) {\n      name += first.leaf(i).token().content();\n    }\n  }\n  let isCp = /^[A-Z]/.test(name);\n  if(isCp) {\n    res += 'karas.createCp(';\n    res += name;\n  }\n  else if(/^\\$/.test(name)) {\n    res += 'karas.createGm(';\n    res += '\"' + name + '\"';\n  }\n  else {\n    res += 'karas.createVd(';\n    res += '\"' + name + '\"';\n  }\n  res += ',[';\n  for(let i = 2, len = node.size(); i < len - 1; i++) {\n    let leaf = node.leaf(i);\n    if(i !== 2) {\n      res += ',';\n    }\n    switch(leaf.name()) {\n      case Node.CSXBindAttribute:\n        res += attr(leaf);\n        break;\n      case Node.CSXAttribute:\n        res += attr(leaf);\n        break;\n      case Node.CSXSpreadAttribute:\n        res += spread(leaf);\n        break;\n    }\n  }\n  res += ']';\n  if(isClose && isCp) {\n    res += ',[],\"' + name + '\"';\n  }\n  return {\n    res,\n    isCp,\n    name,\n  };\n}\nfunction attr(node) {\n  let res = '';\n  let key = node.first().token().content();\n  let name = node.parent().leaf(1).token().content();\n  let isCp = /^[A-Z]/.test(name);\n  let k = '[\"' + key + '\"';\n  res += k + ',';\n  let v = node.last();\n  if(v.isToken()) {\n    v = v.token().content();\n    res += v;\n  }\n  else {\n    res += child(v);\n  }\n  res += ']';\n  return res;\n}\nfunction spread(node) {\n  return join(node.leaf(2));\n}\nfunction child(node) {\n  return new Tree().parse(node).replace(/^(\\s*){/, '$1').replace(/}(\\s*)$/, '$1');\n}\n\nfunction parse(node) {\n  let res = '';\n  switch(node.name()) {\n    case Node.CSXElement:\n      res += elem(node);\n      break;\n    case Node.CSXSelfClosingElement:\n      res += selfClose(node, true).res;\n      res += ')';\n      break;\n  }\n  return res;\n}\n\nexport default parse;\n","import homunculus from 'homunculus';\nimport csx from './csx';\nimport ignore from './ignore';\n\nlet Node = homunculus.getClass('node', 'csx');\n\nclass Tree {\n  constructor() {\n    this.res = '';\n  }\n  parse(node) {\n    this.recursion(node, false);\n    return this.res;\n  }\n  recursion(node) {\n    let self = this;\n    let isToken = node.isToken();\n    if(isToken) {\n      let token = node.token();\n      if(token.isVirtual()) {\n        return;\n      }\n      if(!token.ignore) {\n        this.res += token.content();\n      }\n      while(token.next()) {\n        token = token.next();\n        if(token.isVirtual() || !ignore.S.hasOwnProperty(token.type())) {\n          break;\n        }\n        if(!token.ignore) {\n          this.res += token.content();\n        }\n      }\n    }\n    else {\n      switch(node.name()) {\n        case Node.CSXElement:\n        case Node.CSXSelfClosingElement:\n          this.res += csx(node, {});\n          return;\n      }\n      node.leaves().forEach(function(leaf) {\n        self.recursion(leaf);\n      });\n    }\n  }\n}\n\nexport default Tree;\n","import homunculus from 'homunculus';\nimport Tree from './Tree';\n\nclass Yurine {\n  constructor() {\n    this.parser = null;\n    this.node = null;\n  }\n  parse(code) {\n    this.parser = homunculus.getParser('csx');\n    this.node = this.parser.parse(code);\n    let tree = new Tree();\n    return tree.parse(this.node);\n  }\n  tokens() {\n    return this.ast ? this.parser.lexer.tokens() : null;\n  }\n  ast() {\n    return this.node;\n  }\n\n  static parse(code) {\n    return new Yurine().parse(code);\n  }\n}\n\nexport default new Yurine();\n"],"names":["ES6Token","homunculus","getClass","Token","Node","S","LINE","COMMENT","BLANK","res","append","ignore","node","includeLine","isVirtual","next","hasOwnProperty","type","s","content","isToken","token","leaves","forEach","leaf","parse","JsNode","word","recursion","name","TOKEN","VIRTUAL","ID","NUMBER","KEYWORD","indexOf","charAt","length","replace","elem","tag","selfClose","first","comma","i","len","size","CSXChild","child","test","prev","CSXOpeningElement","CSXClosingElement","isCp","last","isClose","CSXMemberExpression","CSXBindAttribute","attr","CSXAttribute","CSXSpreadAttribute","spread","key","parent","k","v","join","Tree","CSXElement","CSXSelfClosingElement","self","csx","Yurine","parser","code","getParser","tree","ast","lexer","tokens"],"mappings":"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"}